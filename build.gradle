plugins {
	id 'org.springframework.boot' version '3.0.0-RC1'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'java'
	id "com.github.node-gradle.node" version "3.5.0"
}

group = 'com.app.food.team'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
}


dependencies {

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

tasks.named('test') {
	useJUnitPlatform()
}






// Frontend automation

node {
	version = '14.15.5'
	npmVersion = '6.14.11'

	// if true it will download node using the above parameters.
	// otherwise it will try to use the globally installed node.
	download = true

	// Set the work directory to unpack node
	workDir = file("${project.projectDir}/frontend/nodejs")

	npmWorkDir = file("${project.projectDir}/frontend/npm")

	// Set the work directory where node_modules should be located
	nodeModulesDir = file("${project.projectDir}/frontend/")
}

task npmSetScriptShell(type: NpmTask) {
	// \frontend\npm\npm-v6.14.11\npm.cmd
	execOverrides {
		it.ignoreExitValue = true
		it.workingDir = "${project.projectDir}/frontend/"
	}
	args = ['config', 'set', 'script-shell', 'bash']
}

task npmInstallProjectDependencies(type: NpmTask) {

	dependsOn 'npmSetScriptShell', 'npmSetup'
	logger.log(LogLevel.DEBUG, 'Installing Dependencies')
	execOverrides {
		it.ignoreExitValue = true
		it.workingDir = "${project.projectDir}/frontend/"
	}
	args = ['install']
}
task npmBuild(type: NpmTask) {
	dependsOn 'npmInstallProjectDependencies'
	execOverrides {
		it.workingDir = "${project.projectDir}/frontend/"
	}
	args = ['run', 'build']
}
task copyFrontEndToBuild(type: Copy) {
	logger.log(LogLevel.DEBUG, "Copying build files into build folder")
	dependsOn 'npmBuild'
	from "$projectDir/frontend/build/"
	into "$buildDir/resources/main/static"
}
task npmStart(type: NpmTask) {
	execOverrides {
		it.workingDir = "${project.projectDir}/frontend/"
	}
	args = ['start']
}

processResources {
	// we can use a conditional here

	// When releasing to production:
	// dependsOn 'copyFrontEndToBuild'

	// When starting development:
	// dependsOn 'npmInstallProjectDependencies'
}

// you need to find a way to kill all node processes before starting